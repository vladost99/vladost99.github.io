{"version":3,"sources":["components/app-header/app-header.js","components/app-header/index.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/post-list.js","components/post-list/index.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/app.js","components/app/index.js","serviceWorker.js","index.js"],"names":["Header","styled","div","AppHeader","liked","allPosts","SearchPanel","props","state","term","onUpdateSearch","bind","e","target","value","this","setState","className","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","map","filter","onFilterSelect","clazz","onClick","key","PostListItem","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","PostList","posts","elements","item","obj","isEmpty","id","ListGroup","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","AppBlock","App","data","deleteItem","addItem","maxId","items","length","elem","indexOf","index","findIndex","before","slice","after","body","newItem","old","visiblePosts","filterPost","searchPost","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.381af6a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './app-header.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.div`\r\ndisplay: flex;\r\nalign-items: flex-end;\r\njustify-content: space-between;  \r\n`\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return ( \r\n        <Header>\r\n            <h1>Vlad</h1>\r\n    <h2>{allPosts} записей, из них понравилось {liked}</h2>\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","import AppHeader from './app-header';\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, { Component } from 'react';\r\nimport './search-panel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n   constructor(props) {\r\n       super(props);\r\n\r\n       this.state = {\r\n           term: ''\r\n       }\r\n       this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n   }\r\n   onUpdateSearch(e) {\r\n       const term = e.target.value;\r\n       this.setState({term});\r\n       this.props.onUpdateSearch(term);\r\n   }\r\n   \r\n    render() {\r\n        return (\r\n            <input\r\n                className=\"form-control search-input\"\r\n                type=\"text\"\r\n                placeholder=\"Поиск по записям\"\r\n                value={this.state.term}\r\n                onChange={this.onUpdateSearch}\r\n            />\r\n        )\r\n   }\r\n}\r\n\r\n","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;\r\n","import React, { Component } from 'react';\r\nimport './post-status-filter.css';\r\nexport default class PostStatusFilter extends Component {\r\n   constructor(props) {\r\n       super(props);\r\n       this.buttons = [\r\n           {name: 'all', label: 'Все'},\r\n           {name: 'like', label: 'Понравилось'}\r\n       ]\r\n   }\r\n   \r\n    render() {\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const {filter,onFilterSelect} = this.props;\r\n            const active = filter === name;\r\n            const clazz = active?'btn-info': 'btn-outline-secondary';\r\n            return (\r\n                <button \r\n                onClick={() => onFilterSelect(name)}\r\n                key={name} \r\n                className={`btn ${clazz}`}\r\n                 type=\"button\"\r\n                 >{label}</button>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"btn-group\">\r\n              {buttons}\r\n            </div> \r\n        )\r\n   }\r\n}\r\n\r\n","import PostListItem from './post-list-item';\r\nexport default PostListItem;","import React, { Component } from 'react';\r\nimport './post-list-item.css';\r\n\r\n\r\nexport default class PostListItem extends Component {\r\n  \r\n\r\n    render() {\r\n        const {label, onDelete, onToggleImportant, onToggleLiked, important, like} = this.props;\r\n        let classNames = 'app-list-item d-flex justify-content-between';\r\n        \r\n        if(important){\r\n            classNames+=' important';\r\n        }\r\n\r\n        if(like){\r\n            classNames+=' like';\r\n        }\r\n\r\n\r\n        return (\r\n            <li className={classNames}>\r\n                <span \r\n                className=\"app-list-item-label\"\r\n                onClick={onToggleLiked}\r\n                >\r\n                {label}\r\n                </span>\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <button \r\n                    className=\"btn-star btn-sm\"\r\n                        onClick={onToggleImportant}\r\n                    >\r\n                        <i className=\"fa fa-star\"></i>\r\n                    </button>\r\n                    <button \r\n                    className=\"btn-trash btn-sm\"\r\n                    onClick={onDelete}\r\n                    >\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <i className=\"fa fa-heart\"></i>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport PostListItem from '../post-list-item/';\r\nimport './post-list.css';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked}) => {\r\n    \r\n    const elements = posts.map(item => {\r\n       if( typeof item === 'object' && isEmpty(item) ) {\r\n        return (\r\n            <li key={item.id} className=\"list-group-item\">\r\n                 <PostListItem \r\n                 onDelete={ () => onDelete(item.id)}\r\n                 {...item}\r\n                 onToggleImportant={ () => onToggleImportant(item.id)}\r\n                 onToggleLiked={ () => onToggleLiked(item.id)}\r\n                 />\r\n            </li>\r\n        )\r\n       }\r\n    });\r\n    \r\n    return (\r\n        <ListGroup className=\"app-list\">\r\n           {elements}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nfunction isEmpty(obj) {\r\n    for(let key in obj) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default PostList;","import PostList from './post-list';\r\nexport default  PostList;","import PostAddForm from './post-add-form';\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\nimport './post-add-form.css';\r\n\r\n export default class PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            text: ''\r\n        }\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onValueChange(e){\r\n      this.setState({\r\n          text: e.target.value\r\n      });\r\n    }\r\n\r\nonSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAdd(this.state.text);\r\n    this.setState( {\r\n        text: ''\r\n    })\r\n}\r\n    render() {\r\n        return (\r\n            <form \r\n            className=\"bottom-panel d-flex\"\r\n            onSubmit={this.onSubmit}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"О чем вы думаете сейчас\"\r\n                    className=\"form-control new post-label\"\r\n                    onChange={this.onValueChange}\r\n                    value={this.state.text}\r\n               />\r\n                <button \r\n                type=\"submit\"\r\n                className=\"btn btn-outline-secondary\"\r\n                >Добавить</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport AppHeader from '../app-header/';\r\nimport SearchPanel from '../search-panel/';\r\nimport PostStatusFilter from '../post-status-filter/';\r\nimport PostList from '../post-list/';\r\nimport PostAddForm from '../post-add-form';\r\nimport './app.css';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBlock = styled.div`\r\n    margin: 0 auto;\r\n    max-width: 800px;\r\n`\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                {label: 'Going to learn React', important: true, id: 1},\r\n                {label: 'I will do to teach React', important: false, id: 2},\r\n                {label: 'I need to learn React', important: false, id: 3}\r\n            ],\r\n            term: '',\r\n            filter: 'all'\r\n        }\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n        this.maxId = 4;\r\n    }\r\n\r\n    filterPost(items, filter) {\r\n        if(filter === 'like') {\r\n            return items.filter( item => item.like);\r\n        } else {\r\n            return items;\r\n        }\r\n    }\r\n\r\n    onFilterSelect(filter) {\r\n        this.setState({filter})\r\n    }\r\n\r\n    searchPost(items, term) {\r\n        if( term.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter((elem) => {\r\n            return elem.label.indexOf(term) > -1\r\n        });\r\n    }\r\n\r\n    onUpdateSearch(term) {\r\n        this.setState({term})\r\n    }\r\n\r\n    deleteItem(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            \r\n            const before = data.slice(0, index);\r\n            const after = data.slice(index + 1);\r\n\r\n            const newArr = [...before, ...after];\r\n\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    addItem(body) {\r\n       const newItem = {\r\n           label: body,\r\n           important: false,\r\n           id: this.maxId++\r\n       }\r\n       this.setState(({data}) => {\r\n           const newArr = [...data, newItem];\r\n           return {\r\n               data: newArr\r\n           }\r\n       })\r\n    }\r\n\r\n    onToggleImportant(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex( elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = {...old, important: !old.important}\r\n    \r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\r\n            \r\n            return {\r\n                data: newArr\r\n            }\r\n          });\r\n    }\r\n\r\n    onToggleLiked(id) {\r\n      this.setState(({data}) => {\r\n        const index = data.findIndex( elem => elem.id === id);\r\n        const old = data[index];\r\n        const newItem = {...old, like: !old.like}\r\n\r\n        const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\r\n        \r\n        return {\r\n            data: newArr\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {data, term, filter} = this.state;\r\n        const liked = data.filter(item => item.like).length;\r\n        const allPosts = data.length;\r\n\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter);\r\n\r\n        return ( \r\n            <AppBlock>\r\n                 <AppHeader\r\n                 liked ={liked}\r\n                 allPosts={allPosts}\r\n                 />\r\n                 <div className=\"searc-panel d-flex\">\r\n                   <SearchPanel\r\n                   onUpdateSearch={this.onUpdateSearch}\r\n                   />\r\n                   <PostStatusFilter\r\n                   filter={filter}\r\n                   onFilterSelect={this.onFilterSelect}\r\n                   />\r\n                </div>\r\n                <PostList \r\n                 posts={visiblePosts}\r\n                 onDelete={this.deleteItem}\r\n                 onToggleImportant={this.onToggleImportant}\r\n                 onToggleLiked={this.onToggleLiked}\r\n                />\r\n                <PostAddForm\r\n                    onAdd={this.addItem}\r\n                />\r\n            </AppBlock>\r\n             )\r\n    }\r\n}\r\n\r\n","import App from './app';\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n <App/>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}